==================================================================
CUDDLYNEST BLOG - SLUG STRUCTURE MIGRATION INSTRUCTIONS
==================================================================

OVERVIEW:
- English posts: /blog/country/post-name (e.g., /blog/usa/orlando-hotels)
- Translated posts: /blog/country/lang/post-name (e.g., /blog/usa/es/orlando-hotels)

==================================================================
1. ROUTING CHANGES NEEDED
==================================================================

STEP 1: Create new catch-all route directory
-------------------------------------------
mkdir -p app/blog/[...slug]

STEP 2: Create the main page file
---------------------------------
Create: app/blog/[...slug]/page.tsx
(Copy the complete content from the existing app/blog/[...slug]/page.tsx file)

STEP 3: Copy supporting files
-----------------------------
cp app/blog/[slug]/loading.tsx app/blog/[...slug]/loading.tsx
cp app/blog/[slug]/error.tsx app/blog/[...slug]/error.tsx

==================================================================
2. DATABASE MIGRATION REQUIREMENTS
==================================================================

ENGLISH POSTS SLUG FORMAT:
---------------------------
Current: "simple-post-name"
New: "country/simple-post-name"

Example SQL for single post:
UPDATE modern_posts 
SET slug = 'usa/orlando-beachfront-hotels' 
WHERE slug = 'orlando-beachfront-hotels';

BULK MIGRATION SQL TEMPLATE:
-----------------------------
-- For USA posts (example):
UPDATE modern_posts 
SET slug = CONCAT('usa/', slug) 
WHERE slug NOT LIKE '%/%' 
  AND -- add your criteria to identify USA posts
  
-- For other countries, replace 'usa/' with appropriate country code

TRANSLATED POSTS:
-----------------
- English post slug: "usa/orlando-hotels"
- Spanish translation: keep same slug in modern_posts table
- The URL becomes: /blog/usa/es/orlando-hotels (handled by routing)
- Translation data stays in post_translations table

==================================================================
3. URL STRUCTURE EXAMPLES
==================================================================

ENGLISH POSTS:
- URL: /blog/usa/orlando-beachfront-hotels
- Database slug: "usa/orlando-beachfront-hotels"
- File route: app/blog/[...slug]/page.tsx

TRANSLATED POSTS:
- URL: /blog/usa/es/orlando-beachfront-hotels
- Database slug: "usa/orlando-beachfront-hotels" (same as English)
- Language code: "es" (handled by routing logic)
- Translation data: post_translations table

OTHER EXAMPLES:
- /blog/italy/rome-attractions
- /blog/france/paris-hotels
- /blog/spain/barcelona-restaurants
- /blog/spain/fr/barcelona-restaurants (French translation)

==================================================================
4. MIGRATION STEPS FOR 1500+ POSTS
==================================================================

STEP 1: Backup database
-----------------------
pg_dump your_database > backup_before_migration.sql

STEP 2: Test with one post first
--------------------------------
UPDATE modern_posts 
SET slug = 'usa/orlando-beachfront-hotels' 
WHERE id = '000ca5d3-2c15-47c8-90d4-a586be54032a';

Test URL: http://localhost:3000/blog/usa/orlando-beachfront-hotels

STEP 3: Create country mapping logic
------------------------------------
You'll need to determine country for each post. Options:
a) Create a mapping table
b) Use post content analysis
c) Manual categorization
d) Use existing categories/tags

STEP 4: Bulk update by country
------------------------------
-- Example for USA posts
UPDATE modern_posts 
SET slug = CONCAT('usa/', slug)
WHERE slug NOT LIKE '%/%'
  AND [your_usa_criteria];

-- Example for Italy posts  
UPDATE modern_posts 
SET slug = CONCAT('italy/', slug)
WHERE slug NOT LIKE '%/%'
  AND [your_italy_criteria];

STEP 5: Update any hardcoded links
----------------------------------
Search codebase for hardcoded blog URLs and update them.

==================================================================
5. ROUTING LOGIC EXPLANATION
==================================================================

The new [....slug]/page.tsx handles:

- /blog/usa/orlando-hotels
  → slug array: ["usa", "orlando-hotels"]  
  → Database lookup: "usa/orlando-hotels"
  → Language: "en" (default)

- /blog/usa/es/orlando-hotels
  → slug array: ["usa", "es", "orlando-hotels"]
  → Database lookup: "usa/orlando-hotels" 
  → Language: "es"
  → Fetches translation from post_translations table

==================================================================
6. TESTING CHECKLIST
==================================================================

□ English post loads: /blog/usa/orlando-beachfront-hotels
□ 404 for old URL: /blog/orlando-beachfront-hotels
□ Translated post works: /blog/usa/es/orlando-beachfront-hotels (if translation exists)
□ SEO metadata correct
□ Internal links updated
□ Sitemap regenerated
□ Search functionality works with new slugs

==================================================================
7. ROLLBACK PLAN (IF NEEDED)
==================================================================

If issues arise, restore from backup:
psql your_database < backup_before_migration.sql

Then revert routing changes by removing the [....slug] directory.

==================================================================
8. PERFORMANCE CONSIDERATIONS
==================================================================

- Database queries remain efficient (single slug lookup)
- No impact on existing caching
- Translation lookup only happens for non-English requests
- Existing SEO URLs will 404 (plan redirects if needed)

==================================================================
9. NEXT STEPS AFTER MIGRATION
==================================================================

1. Update XML sitemaps with new URL structure
2. Set up 301 redirects for critical old URLs
3. Update internal linking components
4. Test with Google Search Console
5. Monitor 404 errors and fix important ones

==================================================================
10. FILES CHANGED SUMMARY
==================================================================

NEW FILES:
- app/blog/[...slug]/page.tsx (main routing logic)
- app/blog/[...slug]/loading.tsx (copied from [slug])
- app/blog/[...slug]/error.tsx (copied from [slug])

KEEP EXISTING:
- app/blog/[slug]/page.tsx (for backward compatibility during transition)
- All other blog components unchanged

DATABASE CHANGES:
- modern_posts.slug column format changed from "post-name" to "country/post-name"
- post_translations table unchanged

==================================================================
END OF INSTRUCTIONS
==================================================================

Contact: Share this file with team members working on the migration.
Test thoroughly before applying to production!